#!/usr/bin/env python
#
# Copyright (C) 2011-2014 ABINIT Group (Yann Pouillon)
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

from __future__ import print_function

from configparser import ConfigParser,NoOptionError
from time import gmtime,strftime

import subprocess
import os
import re
import sys

class MyConfigParser(ConfigParser):

  def optionxform(self,option):
    return str(option)

# ---------------------------------------------------------------------------- #

#
# Subroutines
#

# Macro file template
def config_template(name,stamp,pkg):

  return """# Generated by %s on %s

#
# SIESTA build-system support
#

#
# IMPORTANT NOTE
#
# This file has been automatically generated by the %s
# script. If you try to edit it, your changes will systematically be
# overwritten.
#

# Build parameters
FC            = @FC@
FFLAGS        = @CPPFLAGS_%s@ @FCFLAGS_%s@
FFLAGS_DEBUG  = -g -O0 
FFLAGS_CHECKS = -g -O0
LDFLAGS       = @LDFLAGS_%s@
AR            = @AR@
RANLIB        = @RANLIB@

# Dependencies
LIBXC_MK_FILE_DIR = $(MAIN_OBJDIR)/../../../config/siesta@DEPS@

#
.F.o:
	$(FC) -c $(FFLAGS) $(INCFLAGS)  $(FPPFLAGS) $<
.f.o:
	$(FC) -c $(FFLAGS) $(INCFLAGS)   $<
.F90.o:
	$(FC) -c $(FFLAGS) $(INCFLAGS)  $(FPPFLAGS) $<
.f90.o:
	$(FC) -c $(FFLAGS) $(INCFLAGS)   $<
#
""" % (name,stamp,name,pkg.upper(),pkg.upper(),pkg.upper())

# ---------------------------------------------------------------------------- #

#
# Main program
#

# Initial setup
my_name    = "make-config-siesta-in"
my_configs = ["config/specs/fallbacks.conf"]
my_outdir  = "config/siesta"

# Check if we are in the top of the ABINIT source tree
if ( not os.path.exists("configure.ac") or
     not os.path.exists("config/specs/fallbacks.conf") ):
  print("%s: You must be in the top of an ABINIT source tree." % my_name)
  print("%s: Aborting now." % my_name)
  sys.exit(1)

# Read config file(s)
for cnf_file in my_configs:
  if ( os.path.exists(cnf_file) ):
    if ( re.search("\.cf$",cnf_file) ):
      exec(compile(open(cnf_file).read(), cnf_file, 'exec'))
  else:
    print("%s: Could not find config file (%s)." % (my_name,cnf_file))
    print("%s: Aborting now." % my_name)
    sys.exit(2)

# What time is it?
now = strftime("%Y/%m/%d %H:%M:%S +0000",gmtime())

# Init
cnf = MyConfigParser()
cnf.read(my_configs[0])
abinit_fallbacks = cnf.sections()
abinit_fallbacks.sort()

# Process fallbacks individually
for pkg in abinit_fallbacks:

  # Extract mandatory package information
  pkg_name = cnf.get(pkg,"name")
  pkg_conf = cnf.get(pkg,"configure")
  pkg_cscr = cnf.get(pkg,"cfg_script")

  # Extract optional package information
  if ( cnf.has_option(pkg,"siesta_mk") ):
    pkg_smki = cnf.get(pkg,"siesta_mk")
  else:
    pkg_smki = pkg
  cfg_deps = ""
  try:
    pkg_deps = cnf.get(pkg,"depends").split()
    pkg_deps.sort()
    for dep in pkg_deps:
      if ( cnf.get(dep,"configure") == "siesta" ):
        cfg_deps += "\n%s_ROOT = $(DESTDIR)@prefix@/@%s_pkg_inst@" % \
          (dep.upper(),dep)
  except NoOptionError:
    pkg_deps = None

  # Write down config file
  if ( pkg_conf == "siesta" ):
    cfg_data = config_template(my_name,now,pkg)
    cfg_data = re.sub("@DEPS@",cfg_deps,cfg_data)
    file("%s/%s.mk.in" % (my_outdir,pkg_smki),"w").write(cfg_data)
